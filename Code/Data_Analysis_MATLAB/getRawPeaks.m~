function [rawPeaksMat]=getRawPeaks(fftMat,typeOfData,loggedVariable)
%   GETRAWPEAKS: Function that uses estFreqsMat (the user-entered matrix
%   containing estimated locations of peaks/inflection points) in order to 
%   find the actual peaks in the fast-fourier tranform of the raw data.
% 
%   rawPeaksMat = getRawPeaks(fftMat,typeOfData,loggedVariable) takes the
%   estimated frequencies of peaks/inflection points that the user inputs 
%   (estFreqsMat) and finds the actual locations of the peaks/inflection 
%   points in the fast-fourier transform of the raw data.
% 
%   INPUTS
%       fftMat              The fast-fourier transform matrix of the raw
%                           data
%       typeOfData          The type of data being analyzed. 1=arduino
%                           (power data), 2=crazyflie data
%       loggedVariable      The variable being logged from the data.
%                           OLD DATA:
%                               arduino:    2=power
%                               crazyflie:  2=kalman.stateZ
%                                           3=gyro.x (roll)
%                                           6=gyro.y (pitch)
%                           NEW DATA:
%                               arduino:    2=power
%                               crazyflie:  2=kalman.stateZ
%                                           3=acc.z,
%                                           4=gyro.x (roll)
%                                           5=gyro.y (pitch)
%                                           6=pm.vbat
%                                           7=pm.extCurr
%                                           8=baro.asl
%                                           9=baro.pressure
%
%   OUTPUTS
%       rawPeaksMat         Cell array that stores all of the raw peak
%                           locations. The format is the same as dataMat.
%                           [       {}      ,   {pidt values 1}   ,   {pidt values 2}   , ...                          
%                            {environment 1},     [RAW PEAKS]     ,     [RAW PEAKS]     , ...
%                            {environment 2},     [RAW PEAKS]     ,     [RAW PEAKS]     , ...
%                                    .                 .                     .
%                                    .                 .                     .             ]      
%
%   Cornell University
%   BATL-The Effects of Turbulent Vortex Shedding on the Stability of Quadcopter Drones
%   Ding, Grace
%   30SEP2020
%   Last edited: 12JAN2021

global dataMat;
global estFreqsMat;

rawPeaksMat=cell(size(fftMat,1),size(fftMat,2));
rawPeaksMat(:,1)=dataMat(:,1);
rawPeaksMat(1,:)=dataMat(1,:);
searchThreshold=.75; %how far to search for a peak on either side of the estimated frequency (in Hz)

concavityRange=12; %how many points to each side of the center point to search for the inflection point. concavityRange*freqInterval=the freq range being searched (in Hz)

for i=2:size(fftMat,1)  %loop through environments
    numOfPeaks=length(estFreqsMat{i-1,2}); %number of peaks (predetermined by user in estFreqsMat)
    for j=2:size(fftMat,2)  %get actual peaks
        if ~isempty(fftMat{i,j}) %check that there is data in this cell
            freqInterval=fftMat{i,j}(2,1)-fftMat{i,j}(1,1); %set the x-distance between points
            if typeOfData==2 && strcmp(dataMat{i,j}{typeOfData,2}{1,loggedVariable},'kalman.stateZ')   %if z-pos data
                [pks,locs,width,prom]=findpeaks(log10(fftMat{i,j}(:,2).*fftMat{i,j}(:,1)),fftMat{i,j}(:,1)); %multiply by freq (looking at the log of the data)
            else    %other data
                [pks,locs,width,prom]=findpeaks(log10(fftMat{i,j}(:,2)),fftMat{i,j}(:,1)); %looking at the log of the data
            end
            peaks=[];   %store the peaks
            for a=1:numOfPeaks  %loop through all the peaks for each environment
                indices=find((locs<estFreqsMat{i-1,2}(a)+searchThreshold) & (locs>estFreqsMat{i-1,2}(a)-searchThreshold)); %find the peak that is near the estimated peak
                if isempty(indices)     %no peak found so look for inflection point
                    begFreq=estFreqsMat{i-1,2}(a)-freqInterval/2; %find beginning of the range in which to locate a central point
                    endFreq=estFreqsMat{i-1,2}(a)+freqInterval/2; %find ending of the range in which to locate a central point
                    if begFreq<fftMat{i,j}(2,1)     %if the range is out-of-bounds at the beginning
                        begFreq=fftMat{i,j}(2,1);  %use the first non-zero freqency
                    end
                    if endFreq>fftMat{i,j}(end,1)   %if the range is out-of-bounds at the end
                        endFreq=fftMat{i,j}(end,1); %use the last frequency
                    end
                    center=find(fftMat{i,j}(:,1)<=endFreq & fftMat{i,j}(:,1)>=begFreq);     %look for the point in the data that is in the range
                    if length(center)>1     %more than one point in the range (the range falls on the freq interval exactly)
                        center=center(1);   %take the first point (left-most point)
                    end
                    begConcavityRange=center-concavityRange;    %find the beginning point for the range being differentiated
                    endConcavityRange=center+concavityRange;    %find the ending point for the range being differentiated
                    if begConcavityRange<2  %if the first point in the range is out-of-bounds
                        begConcavityRange=2;    %use the first non-zero point
                    end
                    if endConcavityRange>length(fftMat{i,j}(:,1))   %if the last point in the range is out-of-bounds
                        endConcavityRange=length(fftMat{i,j}(:,1)); %use the last point
                    end
                    freqSection=fftMat{i,j}(begConcavityRange:endConcavityRange,1); %save the actual freqencies in the range
                    if typeOfData==2 && strcmp(dataMat{i,j}{typeOfData,2}{1,loggedVariable},'kalman.stateZ')   %if zpos data
                        ampSection=fftMat{i,j}(begConcavityRange:endConcavityRange,2).*freqSection; %multipy by freq and save amplitudes
                    else    %not zpos data
                        ampSection=fftMat{i,j}(begConcavityRange:endConcavityRange,2);  %save amplitudes
                    end
                    concavity=diff(ampSection,2);   %take the derivative
                    [B,I]=sort(abs(concavity));     %find the value closest to 0 aka the inflection point
                    peaks=[peaks; freqSection(I(1)) ampSection(I(1))];  %save the inflection point in the peaks array
                else    %peak found
                    if length(indices)>1    %if theres more than one found index
                        disp('something has gone terribly wrong');  %theres an error bc its finding more than 1 peak
                    end
                    peaks=[peaks; locs(indices(1)) 10.^pks(indices)]; 
                end
                
            end
            rawPeaksMat(i,j)={peaks};
        end
    end
end

end